#include "type.h"
#include "otg_device_standard_request.h"

//USB设备描述符
uint8_t DeviceDescriptor[] =
{
	0x12, 		// bLength
	0x01, 		// bDescriptorType
	0x10, 0x01,	// bcdUSB
	0x00, 		// bDeviceClass
	0x00, 		// bDeviceSubClass
	0x00, 		// bDeviceProtocol
	0x40,		// bMaxPacketSize0
	0x00, 0x00, // idVendor
	0x00, 0x00,	// idProduct
	0x00, 0x01, // bcdDevice
	0x01, 		// iManufacturer
	0x02,		// iProduct
	0x03,		// iSerialNumber
	0x01,		// bNumConfigurations
};


//音乐控制命令 HID报告描述符
const uint8_t AudioCtrlReportDescriptor[] =
{
	0x05, 0x0C,	//Usage Page (Consumer)
	0x09, 0x01, //Usage (Consumer Control)
	0xA1, 0x01,	//Collection (Application)
	0x15, 0x00,	//Logical minimum (0)
	0x25, 0x01,	//Logical maximum (1)
	0x09, 0xE9,	//VOL+
	0x09, 0xEA, //VOL-
	0x09, 0xB5, //Scan Next Track
	0x09, 0xB6, //Scan Previous Track
	0x09, 0xE2, //Mute
	0x09, 0xB3, //Fast Forward OOC 15.7
	0x09, 0xCD, //Play/Pause
	0x09, 0xB7, //Stop
	0x75, 0x01,	//Report Size (1)
	0x95, 0x08, //Report Count (8)
	0x81, 0x42,
	0xC0
};

#if HID_DATA_FUN_EN
//在线调音HID报告描述符
const uint8_t HidDataReportDescriptor[] =
{
	0x06, 0x00, 0xFF,
//	0x09, 0x01,
	0x0A, 0xAA, 0x55,
	0xA1, 0x01,
	0x15, 0x00,
	0x26, 0xFF, 0x00,
	0x75, 0x08,

	0x96, 0x00, 0x01,
	0x09, 0x01,
	0x81, 0x02,

	0x96, 0x00, 0x01,
	0x09, 0x01,
	0x91, 0x02,

	0x95, 0x08,
	0x09, 0x01,
	0xB1, 0x02,
	0xC0
};
#endif


#define ConfigDescriptor_Tab(x) 	ConfigDescriptor_##x
#define InterFaceNum_Tab(x) 		InterFaceNum_##x


//声卡 只有音频输出
const uint8_t ConfigDescriptor_Tab(AUDIO_ONLY)[] =
{
#if HID_DATA_FUN_EN
	//一共4个接口
	0x09,0x02,156,0x00,0x04,0x01,0x00,0x80,0x32,
#else
	0x09,0x02,156-18,0x00,0x03,0x01,0x00,0x80,0x32,
#endif
	//0 audio control Interface
	0x09,0x04,0x00,0x00,0x00,0x01,0x01,0x00,0x00,

	0x09,0x24,0x01,0x00,0x01,/*0x4F*/40,0x00,0x01,0x01,
	0x0C,0x24,0x02,0x01,0x01,0x01,0x00,0x02,0x03,0x00,0x00,0x00,
	0x0A,0x24,0x06,0x02,0x01,0x01,0x01,0x02,0x02,0x00,
	0x09,0x24,0x03,0x03,0x01,0x03,0x00,0x02,0x00,

	//1 audio stream Interface, speeaker
	0x09,0x04,0x01,0x00,0x00,0x01,0x02,0x00,0x00,
	0x09,0x04,0x01,0x01,0x01,0x01,0x02,0x00,0x00,
	0x07,0x24,0x01,0x01,0x01,0x01,0x00,
	0x0E,0x24,0x02,0x01,0x02,0x02,0x10,0x02,0x44,0xAC, 0x00,0x80,0xBB, 0x00,
	0x09, 0x05, DEVICE_ISO_OUT_EP, 0x09, DEVICE_FS_ISO_OUT_MPS, 0x00, 0x01, 0x00, 0x00,
	0x07,0x25,0x01,0x01,0x00,0x00,0x00,

	//2 hid 播放控制
	0x09,0x04,0x02,0x00,0x01,0x03,0x00,0x00,0x00,
	0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(AudioCtrlReportDescriptor),0x00,
	0x07,0x05,DEVICE_INT_IN_EP,0x03,DEVICE_FS_INT_IN_MPS,0x00,0x01,
#if HID_DATA_FUN_EN
	//3 hid data
	0x09,0x04,0x03,0x00,0x00,0x03,0x00,0x00,0x00,
	0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(HidDataReportDescriptor),0x00,
#endif
};
const uint8_t InterFaceNum_Tab(AUDIO_ONLY)[] = {0xFF,0x00,0x01,0xFF,0x02,0x03};


////声卡 只有MIC输入
const uint8_t ConfigDescriptor_Tab(MIC_ONLY)[] =
{
#if HID_DATA_FUN_EN
	//一共4个接口
	0x09,0x02,163,0x00,0x04,0x01,0x00,0x80,0x32,
#else
	0x09,0x02,163-18,0x00,0x03,0x01,0x00,0x80,0x32,
#endif
	//0 audio control Interface
	0x09,0x04,0x00,0x00,0x00,0x01,0x01,0x00,0x00,

	0x09,0x24,0x01,0x00,0x01,47,0x00,0x01,0x01,

	0x0C,0x24,0x02,0x04,0x01,0x02,0x00,0x02,0x03,0x00,0x00,0x00,
	0x0A,0x24,0x06,0x05,0x04,0x01,0x01,0x02,0x02,0x00,
	0x07,0x24,0x05,0x06,0x01,0x05,0x00,
	0x09,0x24,0x03,0x07,0x01,0x01,0x00,0x06,0x00,

	//2 audio stream Interface, microphone
	0x09,0x04,0x01,0x00,0x00,0x01,0x02,0x00,0x00,
	0x09,0x04,0x01,0x01,0x01,0x01,0x02,0x00,0x00,
	0x07,0x24,0x01,0x07,0x01,0x01,0x00,
	0x0E,0x24,0x02,0x01,MIC_CH,0x02,0x10,0x02,0x44,0xAC, 0x00,0x80,0xBB, 0x00,
	0x09, 0x05, DEVICE_ISO_IN_EP, 0x09, DEVICE_FS_ISO_IN_MPS, 0x00, 0x01, 0x00, 0x00,
	0x07,0x25,0x01,0x01,0x00,0x00,0x00,

	//3 hid 播放控制
	0x09,0x04,0x02,0x00,0x01,0x03,0x00,0x00,0x00,
	0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(AudioCtrlReportDescriptor),0x00,
	0x07,0x05,DEVICE_INT_IN_EP,0x03,DEVICE_FS_INT_IN_MPS,0x00,0x01,
#if HID_DATA_FUN_EN
	0x09,0x04,0x03,0x00,0x00,0x03,0x00,0x00,0x00,
	0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(HidDataReportDescriptor),0x00,
#endif
};
const uint8_t InterFaceNum_Tab(MIC_ONLY)[] = {0xFF,0x00,0xFF,0x01,0x02,0x03};

//声卡 MIC输入和AUDIO输出
const uint8_t ConfigDescriptor_Tab(AUDIO_MIC)[] =
{
#if HID_DATA_FUN_EN
	//一共4个接口
	0x09,0x02,0xE8+18,0x00,0x05,0x01,0x00,0x80,0x32,
#else
	0x09,0x02,0xE8,0x00,0x04,0x01,0x00,0x80,0x32,
#endif
	//0 audio control Interface
	0x09,0x04,0x00,0x00,0x00,0x01,0x01,0x00,0x00,
	0x0A,0x24,0x01,0x00,0x01,0x4F,0x00,0x02,0x01,0x02,
	0x0C,0x24,0x02,0x01,0x01,0x01,0x00,0x02,0x03,0x00,0x00,0x00,
	0x0A,0x24,0x06,0x02,0x01,0x01,0x01,0x02,0x02,0x00,
	0x09,0x24,0x03,0x03,0x01,0x03,0x00,0x02,0x00,
	0x0C,0x24,0x02,0x04,0x01,0x02,0x00,0x02,0x03,0x00,0x00,0x00,
	0x0A,0x24,0x06,0x05,0x04,0x01,0x01,0x02,0x02,0x00,
	0x07,0x24,0x05,0x06,0x01,0x05,0x00,
	0x09,0x24,0x03,0x07,0x01,0x01,0x00,0x06,0x00,

	//1 audio stream Interface, speeaker
	0x09,0x04,0x01,0x00,0x00,0x01,0x02,0x00,0x00,
	0x09,0x04,0x01,0x01,0x01,0x01,0x02,0x00,0x00,
	0x07,0x24,0x01,0x01,0x01,0x01,0x00,
	0x0E,0x24,0x02,0x01,0x02,0x02,0x10,0x02,0x44,0xAC, 0x00,0x80,0xBB, 0x00,
	0x09, 0x05, DEVICE_ISO_OUT_EP, 0x09, DEVICE_FS_ISO_OUT_MPS, 0x00, 0x01, 0x00, 0x00,
	0x07,0x25,0x01,0x01,0x00,0x00,0x00,

	//2 audio stream Interface, microphone
	0x09,0x04,0x02,0x00,0x00,0x01,0x02,0x00,0x00,
	0x09,0x04,0x02,0x01,0x01,0x01,0x02,0x00,0x00,
	0x07,0x24,0x01,0x07,0x01,0x01,0x00,
	0x0E,0x24,0x02,0x01,MIC_CH,0x02,0x10,0x02,0x44,0xAC, 0x00,0x80,0xBB, 0x00,
	0x09, 0x05, DEVICE_ISO_IN_EP, 0x09, DEVICE_FS_ISO_IN_MPS, 0x00, 0x01, 0x00, 0x00,
	0x07,0x25,0x01,0x01,0x00,0x00,0x00,

	//3 hid 播放控制
	0x09,0x04,0x03,0x00,0x01,0x03,0x00,0x00,0x00,
	0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(AudioCtrlReportDescriptor),0x00,
	0x07,0x05,DEVICE_INT_IN_EP,0x03,DEVICE_FS_INT_IN_MPS,0x00,0x01,
#if HID_DATA_FUN_EN
	0x09,0x04,0x04,0x00,0x00,0x03,0x00,0x00,0x00,
	0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(HidDataReportDescriptor),0x00,
#endif
};
const uint8_t InterFaceNum_Tab(AUDIO_MIC)[] = {0xFF,0x00,0x01,0x02,0x03,0x04};


const uint8_t ConfigDescriptor_Tab(READER)[] =
{
//一共1个接口
0x09,0x02,0x20,0x00,0x01,0x01,0x00,0x80,0x32,

	//mass-storage Interface
	0x09,0x04,0x00,0x00,0x02,0x08,0x06,0x50,0x00,
		0x07,0x05,DEVICE_BULK_IN_EP,0x02, DEVICE_FS_BULK_IN_MPS, 0x00,0x01,
		0x07,0x05,DEVICE_BULK_OUT_EP,0x02,DEVICE_FS_BULK_OUT_MPS,0x00,0x01,
};
const uint8_t InterFaceNum_Tab(READER)[] = {0x00,0xFF,0xFF,0xFF,0xFF,0xFF};


//声卡 只有音频输出
const uint8_t ConfigDescriptor_Tab(AUDIO_READER)[] =
{
#if HID_DATA_FUN_EN
	//一共4个接口
	0x09,0x02,(156+23),0x00,0x05,0x01,0x00,0x80,0x32,
#else
	0x09,0x02,(156-18+23),0x00,0x04,0x01,0x00,0x80,0x32,
#endif

	//0 mass-storage Interface
	0x09,0x04,0x00,0x00,0x02,0x08,0x06,0x50,0x00,
		0x07,0x05,DEVICE_BULK_IN_EP,0x02, DEVICE_FS_BULK_IN_MPS, 0x00,0x01,
		0x07,0x05,DEVICE_BULK_OUT_EP,0x02,DEVICE_FS_BULK_OUT_MPS,0x00,0x01,

	//1 audio control Interface
	0x09,0x04,0x01,0x00,0x00,0x01,0x01,0x00,0x00,

	0x09,0x24,0x01,0x00,0x01,/*0x4F*/40,0x00,0x01,0x02,
	0x0C,0x24,0x02,0x01,0x01,0x01,0x00,0x02,0x03,0x00,0x00,0x00,
	0x0A,0x24,0x06,0x02,0x01,0x01,0x01,0x02,0x02,0x00,
	0x09,0x24,0x03,0x03,0x01,0x03,0x00,0x02,0x00,

	//2 audio stream Interface, speeaker
	0x09,0x04,0x02,0x00,0x00,0x01,0x02,0x00,0x00,
	0x09,0x04,0x02,0x01,0x01,0x01,0x02,0x00,0x00,
	0x07,0x24,0x01,0x01,0x01,0x01,0x00,
	0x0E,0x24,0x02,0x01,0x02,0x02,0x10,0x02,0x44,0xAC, 0x00,0x80,0xBB, 0x00,
	0x09, 0x05, DEVICE_ISO_OUT_EP, 0x09, DEVICE_FS_ISO_OUT_MPS, 0x00, 0x01, 0x00, 0x00,
	0x07,0x25,0x01,0x01,0x00,0x00,0x00,

	//3 hid 播放控制
	0x09,0x04,0x03,0x00,0x01,0x03,0x00,0x00,0x00,
	0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(AudioCtrlReportDescriptor),0x00,
	0x07,0x05,DEVICE_INT_IN_EP,0x03,DEVICE_FS_INT_IN_MPS,0x00,0x01,

#if HID_DATA_FUN_EN
	//4 hid data
	0x09,0x04,0x04,0x00,0x00,0x03,0x00,0x00,0x00,
	0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(HidDataReportDescriptor),0x00,
#endif
};
const uint8_t InterFaceNum_Tab(AUDIO_READER)[] = {0x00,0x01,0x02,0xFF,0x03,0x04};

////声卡 只有MIC输入
const uint8_t ConfigDescriptor_Tab(MIC_READER)[] =
{
#if HID_DATA_FUN_EN
	//一共4个接口
	0x09,0x02,(163+23),0x00,0x05,0x01,0x00,0x80,0x32,
#else
	0x09,0x02,(163-18+23),0x00,0x04,0x01,0x00,0x80,0x32,
#endif
	//0 mass-storage Interface
	0x09,0x04,0x00,0x00,0x02,0x08,0x06,0x50,0x00,
		0x07,0x05,DEVICE_BULK_IN_EP,0x02, DEVICE_FS_BULK_IN_MPS, 0x00,0x01,
		0x07,0x05,DEVICE_BULK_OUT_EP,0x02,DEVICE_FS_BULK_OUT_MPS,0x00,0x01,

	//1 audio control Interface
	0x09,0x04,0x01,0x00,0x00,0x01,0x01,0x00,0x00,
		0x09,0x24,0x01,0x00,0x01,47,0x00,0x01,0x02,
		0x0C,0x24,0x02,0x04,0x01,0x02,0x00,0x02,0x03,0x00,0x00,0x00,
		0x0A,0x24,0x06,0x05,0x04,0x01,0x01,0x02,0x02,0x00,
		0x07,0x24,0x05,0x06,0x01,0x05,0x00,
		0x09,0x24,0x03,0x07,0x01,0x01,0x00,0x06,0x00,

	//2 audio stream Interface, microphone
	0x09,0x04,0x02,0x00,0x00,0x01,0x02,0x00,0x00,
		0x09,0x04,0x02,0x01,0x01,0x01,0x02,0x00,0x00,
		0x07,0x24,0x01,0x07,0x01,0x01,0x00,
		0x0E,0x24,0x02,0x01,MIC_CH,0x02,0x10,0x02,0x44,0xAC, 0x00,0x80,0xBB, 0x00,
		0x09, 0x05, DEVICE_ISO_IN_EP, 0x09, DEVICE_FS_ISO_IN_MPS, 0x00, 0x01, 0x00, 0x00,
		0x07,0x25,0x01,0x01,0x00,0x00,0x00,

	//3 hid 播放控制
	0x09,0x04,0x03,0x00,0x01,0x03,0x00,0x00,0x00,
		0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(AudioCtrlReportDescriptor),0x00,
		0x07,0x05,DEVICE_INT_IN_EP,0x03,DEVICE_FS_INT_IN_MPS,0x00,0x01,
#if HID_DATA_FUN_EN
	0x09,0x04,0x04,0x00,0x00,0x03,0x00,0x00,0x00,
		0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(HidDataReportDescriptor),0x00,
#endif
};

const uint8_t InterFaceNum_Tab(MIC_READER)[] = {0x00,0x01,0xFF,0x02,0x03,0x04};



//声卡 MIC输入和AUDIO输出
const uint8_t ConfigDescriptor_Tab(AUDIO_MIC_READER)[] =
{
#if HID_DATA_FUN_EN
	//一共4个接口
	0x09,0x02,17,0x01,0x06,0x01,0x00,0x80,0x32,
#else
	0x09,0x02,255,0x00,0x05,0x01,0x00,0x80,0x32,
#endif
	//0 mass-storage Interface
	0x09,0x04,0x00,0x00,0x02,0x08,0x06,0x50,0x00,
		0x07,0x05,DEVICE_BULK_IN_EP,0x02, DEVICE_FS_BULK_IN_MPS, 0x00,0x01,
		0x07,0x05,DEVICE_BULK_OUT_EP,0x02,DEVICE_FS_BULK_OUT_MPS,0x00,0x01,

	//0 audio control Interface
	0x09,0x04,0x01,0x00,0x00,0x01,0x01,0x00,0x00,
		0x0A,0x24,0x01,0x00,0x01,0x4F,0x00,0x02,0x02,0x03,
		0x0C,0x24,0x02,0x01,0x01,0x01,0x00,0x02,0x03,0x00,0x00,0x00,
		0x0A,0x24,0x06,0x02,0x01,0x01,0x01,0x02,0x02,0x00,
		0x09,0x24,0x03,0x03,0x01,0x03,0x00,0x02,0x00,
		0x0C,0x24,0x02,0x04,0x01,0x02,0x00,0x02,0x03,0x00,0x00,0x00,
		0x0A,0x24,0x06,0x05,0x04,0x01,0x01,0x02,0x02,0x00,
		0x07,0x24,0x05,0x06,0x01,0x05,0x00,
		0x09,0x24,0x03,0x07,0x01,0x01,0x00,0x06,0x00,

	//1 audio stream Interface, speeaker
	0x09,0x04,0x02,0x00,0x00,0x01,0x02,0x00,0x00,
	0x09,0x04,0x02,0x01,0x01,0x01,0x02,0x00,0x00,
		0x07,0x24,0x01,0x01,0x01,0x01,0x00,
		0x0E,0x24,0x02,0x01,0x02,0x02,0x10,0x02,0x44,0xAC, 0x00,0x80,0xBB, 0x00,
		0x09, 0x05, DEVICE_ISO_OUT_EP, 0x09, DEVICE_FS_ISO_OUT_MPS, 0x00, 0x01, 0x00, 0x00,
		0x07,0x25,0x01,0x01,0x00,0x00,0x00,

	//2 audio stream Interface, microphone
	0x09,0x04,0x03,0x00,0x00,0x01,0x02,0x00,0x00,
	0x09,0x04,0x03,0x01,0x01,0x01,0x02,0x00,0x00,
		0x07,0x24,0x01,0x07,0x01,0x01,0x00,
		0x0E,0x24,0x02,0x01,MIC_CH,0x02,0x10,0x02,0x44,0xAC, 0x00,0x80,0xBB, 0x00,
		0x09, 0x05, DEVICE_ISO_IN_EP, 0x09, DEVICE_FS_ISO_IN_MPS, 0x00, 0x01, 0x00, 0x00,
		0x07,0x25,0x01,0x01,0x00,0x00,0x00,

	//3 hid 播放控制
	0x09,0x04,0x04,0x00,0x01,0x03,0x00,0x00,0x00,
		0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(AudioCtrlReportDescriptor),0x00,
		0x07,0x05,DEVICE_INT_IN_EP,0x03,DEVICE_FS_INT_IN_MPS,0x00,0x01,
#if HID_DATA_FUN_EN
	0x09,0x04,0x05,0x00,0x00,0x03,0x00,0x00,0x00,
		0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(HidDataReportDescriptor),0x00,
#endif
};
const uint8_t InterFaceNum_Tab(AUDIO_MIC_READER)[] = {0x00,0x01,0x02,0x03,0x04,0x05};


//HID数据传输
const uint8_t ConfigDescriptor_Tab(HID)[] =
{
//一共1个接口
0x09, 0x02, 0x1B, 0x00, 0x01, 0x01, 0x00, 0x80, 0x32,

	//HID自定数据传输接口
	0x09,0x04,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
	0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(HidDataReportDescriptor),0x00
};
const uint8_t InterFaceNum_Tab(HID)[] = {0xFF,0xFF,0xFF,0xFF,0xFF,0x00};


 uint8_t * const ConfigDescriptorTab[8] =
{
	ConfigDescriptor_Tab(AUDIO_ONLY),
	ConfigDescriptor_Tab(MIC_ONLY),
	ConfigDescriptor_Tab(AUDIO_MIC),
	ConfigDescriptor_Tab(READER),
	ConfigDescriptor_Tab(AUDIO_READER),
	ConfigDescriptor_Tab(MIC_READER),
	ConfigDescriptor_Tab(AUDIO_MIC_READER),
	ConfigDescriptor_Tab(HID)
};

uint8_t * const InterFaceNumTab[8] =
{
	InterFaceNum_Tab(AUDIO_ONLY),
	InterFaceNum_Tab(MIC_ONLY),
	InterFaceNum_Tab(AUDIO_MIC),
	InterFaceNum_Tab(READER),
	InterFaceNum_Tab(AUDIO_READER),
	InterFaceNum_Tab(MIC_READER),
	InterFaceNum_Tab(AUDIO_MIC_READER),
	InterFaceNum_Tab(HID)
};

